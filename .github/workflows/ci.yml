name: CI

# Triggers the workflow on push or pull request events but only for main branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Test across current stable node versions
    # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        # Cache global package data
        cache: 'npm'

    # Cache node_modules between runs until package-lock.json changes.
    - name: Cache node_modules
      id: internal-cache-node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: internal-node_modules-ubuntu-latest.x-${{ hashFiles('package-lock.json') }}

    # Re-use ~/.elm between runs until elm.json, elm-tooling.json or
    # review/elm.json changes. The Elm compiler saves downloaded Elm packages to
    # ~/.elm, and elm-tooling saves downloaded tool executables there.
    - name: Cache ~/.elm
      uses: actions/cache@v3
      with:
        path: ~/.elm
        key: elm-${{ hashFiles('elm.json', 'elm-tooling.json', 'review/elm.json') }}

    - name: Install npm dependencies
      if: steps.cache-node_modules.outputs.cache-hit != 'true'
      env:
        # If you have a `"postinstall": "elm-tooling install"` script in your
        # package.json, this turns it into a no-op. We’ll run it in the next
        # step because of the caching. If elm-tooling.json changes but
        # package-lock.json does not, the postinstall script needs running but
        # this step won’t.
        NO_ELM_TOOLING_INSTALL: 1
      run: npm ci

    # Install tools from elm-tooling.json, unless we restored them from cache.
    # package-lock.json and elm-tooling.json can change independently, so we
    # need to install separately based on what was restored from cache. This is
    # run even if we restored ~/.elm from cache to be 100% sure
    # node_modules/.bin/ contains links to all your tools. `elm-tooling install`
    # runs very fast when there’s nothing new to download so skipping the step
    # doesn’t save much time.
    - name: elm-tooling install
      run: npx --no-install elm-tooling install

    # Run build for API
    - name: Run build
      run: npm run build

    # Run all tests
    - name: Run tests
      run: npm test
